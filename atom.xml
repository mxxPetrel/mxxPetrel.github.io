<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>mxxPetrel</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-07-22T03:07:12.854Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>mxxPetrel</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>集训Day2题解</title>
    <link href="http://example.com/posts/16809.html"/>
    <id>http://example.com/posts/16809.html</id>
    <published>2022-07-18T07:49:23.000Z</published>
    <updated>2022-07-22T03:07:12.854Z</updated>
    
    <content type="html"><![CDATA[<h2 id="T1-你们必须要分开"><a href="#T1-你们必须要分开" class="headerlink" title="T1-你们必须要分开"></a>T1-你们必须要分开</h2><p>对于$ n \le 1000， k=3$ 两层循环分别枚举三个数字，判断$lcm(a_{1},a_{2},a_{3}) $是否小于 n\div 2 即可。</p><p>对于 $sub2 ： k=3 $：</p><ul><li><p>如果  $n \mod 4 = 0$，则三个数字可以是 $n\div 2,n\div 4,n\div 4$</p></li><li><p>如果  $n\mod 2 = 0 &amp;n\mod 4 \neq 0$，则 三个数字可以是$2,\frac{n}{2}-1,\frac{n}{2}-1$  。</p></li><li><p>如果$n\mod 2 \neq 0$，则 三个数字可以是 $1,\frac{n-1}{2},\frac{n-1}{2}$。</p></li></ul><p>对于  k&gt;3： ，显然可以先输出 k-3 个 1 。然后将剩下的 n 按照 sub2 一样的做就好了。</p><h2 id="T2-市里走一走"><a href="#T2-市里走一走" class="headerlink" title="T2-市里走一走"></a>T2-市里走一走</h2><h5 id="对于-20-的数据："><a href="#对于-20-的数据：" class="headerlink" title="对于$20%$  的数据："></a>对于$20%$  的数据：</h5><p>枚举长方形的四条边，分别计算周长并求和。</p><p>时间复杂度 $O(n^2m^3)，$期望得分$20$分。</p><h5 id="对于-50-的数据："><a href="#对于-50-的数据：" class="headerlink" title="对于 $50%$的数据："></a>对于 $50%$的数据：</h5><p>显然长方形的宽和高的长度是互不相关的，那么我们可以分别处理。</p><p>以长方形的宽为例，我们可以枚举两条南北向的路 ，以它们之间的距离为宽的长方形有$\frac{n(n-1)}{2} $ 个，那么这些长方形的宽长的和为 $|b_{u}-b_{v}| \times n\times(n-1)$。<strong>注意，一个长方形的宽长要计算两次。</strong></p><p>对高的和的计算类似。</p><p>时间复杂度$O(m^2+n^2) $，期望得分 50 分。</p><h5 id="对于-100-的数据："><a href="#对于-100-的数据：" class="headerlink" title="对于 100% 的数据："></a>对于 100% 的数据：</h5><p>考虑固定上、下、右三条边时，如何快速计算所有长方形的宽的和。</p><p>注意到$ \sum_{i=1}^{x-1}{(b_{x}-b_{i})}=(x-1)\times b_{x}- \sum^{x-1}<em>{i=1}{b</em>{i}}$，那么我们只需要统计 $b_{i}$ 的前缀和 $S_{x-1}$，那么这些长方形的宽的和为$(x-1) \times b_{x}-S_{x-1} $。 所以我们只需要枚举一条南北向的路$ y = b_{i}$，再根据 第二档分的做法 中和上述的结论，以这条路为右侧边的所有长方形的宽的和为$[(i-1)\times b_{i}-S_{i-1}]\times n\times(n-1) $。</p><p>对高的和的计算类似 时间复杂度$O(n+m)$。</p><p>总时间复杂度$ O(n\log n+m\log m)$，期望得分 100 分。  是因为需要对每条道路按照从小到大排序。</p><h2 id="T3-玩树"><a href="#T3-玩树" class="headerlink" title="T3-玩树"></a>T3-玩树</h2><p>这个题目题意有点歧义，这里的字典序指的是比较先序序列上的每一个数字的大小。 如果按照常规的字典序定义去理解，那么会出现$ 10&lt;9$ 的情况。 <strong>导致王普立同学痛失 100 分！</strong></p><h5 id="对于前-20-的数据："><a href="#对于前-20-的数据：" class="headerlink" title="对于前 $20%$ 的数据："></a>对于前 $20%$ 的数据：</h5><p>枚举根结点，以及每个结点的所有儿子结点的遍历顺序。</p><p>时间复杂度$ O(n!)$，期望得分 $20$ 分。</p><h5 id="对于前-50-的数据："><a href="#对于前-50-的数据：" class="headerlink" title="对于前 $50%$ 的数据："></a>对于前 $50%$ 的数据：</h5><p>由于先序遍历的第一个是根结点，那么把结点编号最小的点作为根一定是最优的。</p><p>那么这样每个结点的父亲结点、儿子结点已经确定来，只需要确定一个结点的儿子们之间的 顺序即可。</p><p>我们可以直接贪心，对于每个结点，先走它编号最小的儿子结点，走完这个儿子结点的子树 后，再走次小的儿子结点，直到走完所有的儿子结点。</p><p>如果每次都找没走过的儿子结点中最小的，时间复杂度 $O(n^2)$，期望得分 $50$ 分。</p><h5 id="对于-100-的数据：-1"><a href="#对于-100-的数据：-1" class="headerlink" title="对于 $100%$ 的数据："></a>对于 $100%$ 的数据：</h5><p>实际上，我们只需要对每个结点的儿子结点根据编号大小进行排序，就能在 $O(n\log n)$ 的时间内解决，期望得分 100 分。</p><h2 id="T4-玩序列"><a href="#T4-玩序列" class="headerlink" title="T4-玩序列"></a>T4-玩序列</h2><p>这可能是今天唯一一道和算法相关的题目！</p><h5 id="对于-sub1："><a href="#对于-sub1：" class="headerlink" title="对于 sub1："></a>对于 sub1：</h5><p>可以直接在$ 0\sim 501 $的范围内去枚举 x，对于每一个 x 把异或之后的序列求出来。然后两层for循环暴力查找逆序对个数即可。</p><p>时间复杂度为$O(511\times n^2)$  。</p><h5 id="对于-sub2"><a href="#对于-sub2" class="headerlink" title="对于 sub2:"></a>对于 sub2:</h5><p>在 $sub1$ 的做法上把暴力查询逆序对数量改成树状数组即可，复杂度为O$(511 \times n \log n)$</p><h5 id="对于满分做法："><a href="#对于满分做法：" class="headerlink" title="对于满分做法："></a>对于满分做法：</h5><p>因为是异或，所以先把所有数转化为二进制（以下“位”均指二进制位）。</p><p>从高到低一位一位地考虑，在第i位，统计前面位全部相等且第i位不等的数对和逆序对个数。若逆序对个数大于正序对个数，那么的第位应1为，否则为0。</p><p>考虑01trie，可以求上面的两个量。</p><p>具体求法（siz[i]为以i为根的子树内数字个数）：</p><p>逆序对即在插入时若当前位为0，则当前节点逆序对数$cnt+siz[son[1]]$数对即$siz[son[0]] \times siz[son[1]]$</p><p>注意开long long统计答案。</p><p>时间复杂度 $O(n\log n)$</p><p><a href="https://www.luogu.com.cn/problem/solution/CF1416C">更多题解</a></p><h2 id="PS-T5在我的能力范围以外，以后再更新"><a href="#PS-T5在我的能力范围以外，以后再更新" class="headerlink" title="PS:T5在我的能力范围以外，以后再更新"></a>PS:T5在我的能力范围以外，以后再更新</h2><hr><h2 id="T5-继续玩树"><a href="#T5-继续玩树" class="headerlink" title="T5-继续玩树"></a>T5-继续玩树</h2><h5 id="10分算法"><a href="#10分算法" class="headerlink" title="10分算法"></a>10分算法</h5><p>​ 首先能发现，若  最小值 ，直接输出  即可。</p><p>​ 否则暴力找路径，暴力将  算出来然后比大小。</p><h5 id="40分算法"><a href="#40分算法" class="headerlink" title="40分算法"></a>40分算法</h5><p>​ <code>引理1:一条长度为n的路径随机摧毁一个点，余下的两段(或一段)中，较长者长度不小于n/2（下取整)。</code></p><p>​ <code>引理2:答案的路径中，最多有一个2，除此之外全为1。</code></p><p>​ 证明：若路径中存在 ，将其删去后，分子除以 ，分母最多除以  (下取整)，删去后肯定更优秀。</p><p>​ 若路径中有  ，当且仅当  为奇数且  在路径中点。</p><p>​ 若有两个  当且仅当  为中间两个，但是将该路径分开答案不变。若不分开，两端再接上一个  后会发现，分开肯定更优。</p><p>​ 综上所述：所以可以将大于  的点删去，每个连通块中，暴力找路径算答案即可。</p><h5 id="60分做法"><a href="#60分做法" class="headerlink" title="60分做法"></a>60分做法</h5><p>​ 设置该档分数的目的是提示引理2。做法见满分做法。</p><h5 id="另外10分1做法"><a href="#另外10分1做法" class="headerlink" title="另外10分1做法"></a>另外10分1做法</h5><p>​ 直接将花心周围一圈排个序，最小的两个与花心相乘即可，或最小的一个与花心相乘。</p><h5 id="另外10分2做法"><a href="#另外10分2做法" class="headerlink" title="另外10分2做法"></a>另外10分2做法</h5><p>​ 可以设  表示  左边乘积为  的链的最大长度， 表示右边。</p><p>​ 转移时有：​ 最后合并  与  即可。</p><h5 id="满分做法"><a href="#满分做法" class="headerlink" title="满分做法"></a>满分做法</h5><p>​ 将上一档做法转化为树上的即可，类似于树的直径。如果输出用 <code>cout</code> ，则会被卡成 分。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;T1-你们必须要分开&quot;&gt;&lt;a href=&quot;#T1-你们必须要分开&quot; class=&quot;headerlink&quot; title=&quot;T1-你们必须要分开&quot;&gt;&lt;/a&gt;T1-你们必须要分开&lt;/h2&gt;&lt;p&gt;对于$ n \le 1000， k=3$ 两层循环分别枚举三个数字，判断$l</summary>
      
    
    
    
    
    <category term="algorithm" scheme="http://example.com/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>test001</title>
    <link href="http://example.com/posts/16809.html"/>
    <id>http://example.com/posts/16809.html</id>
    <published>2022-07-18T07:49:23.000Z</published>
    <updated>2022-07-23T01:24:49.854Z</updated>
    
    <content type="html"><![CDATA[<h3 id="aaaa"><a href="#aaaa" class="headerlink" title="aaaa"></a>aaaa</h3><ol><li>aaaa</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;aaaa&quot;&gt;&lt;a href=&quot;#aaaa&quot; class=&quot;headerlink&quot; title=&quot;aaaa&quot;&gt;&lt;/a&gt;aaaa&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;aaaa&lt;/li&gt;
&lt;/ol&gt;
</summary>
      
    
    
    
    
    <category term="algorithm" scheme="http://example.com/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>NOIP 2012 疫情控制</title>
    <link href="http://example.com/posts/55716.html"/>
    <id>http://example.com/posts/55716.html</id>
    <published>2022-07-17T11:49:41.000Z</published>
    <updated>2022-07-17T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="NOIP2012-提高组-疫情控制"><a href="#NOIP2012-提高组-疫情控制" class="headerlink" title="NOIP2012 提高组 疫情控制"></a>NOIP2012 提高组 疫情控制</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>$H$ 国有 $n $个城市，这 $n$ 个城市用$ n-1 $条双向道路相互连通构成一棵树，$1 $号城市是首都，也是树中的根节点。</p><p>$H $国的首都爆发了一种危害性极高的传染病。当局为了控制疫情，不让疫情扩散到边境城市（叶子节点所表示的城市），决定动用军队在一些城市建立检查点，使得从首都到边境城市的每一条路径上都至少有一个检查点，边境城市也可以建立检查点。但特别要注意的是，首都是不能建立检查点的。</p><p>现在，在 $H$ 国的一些城市中已经驻扎有军队，且一个城市可以驻扎多个军队。一支军队可以在有道路连接的城市间移动，并在除首都以外的任意一个城市建立检查点，且<strong>只能</strong>在一个城市建立检查点。一支军队经过一条道路从一个城市移动到另一个城市所需要的时间等于道路的长度（单位：小时）。</p><p>请问最少需要多少个小时才能控制疫情。注意：不同的军队可以同时移动。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行一个整数$ n$，表示城市个数。</p><p>接下来的 $n-1$ 行，每行$ 3 $个整数，$u,v,w$，每两个整数之间用一个空格隔开，表示从城市 $u $到城市$ v$ 有一条长为 $w$ 的道路。数据保证输入的是一棵树，且根节点编号为 $1$。</p><p>接下来一行一个整数 $m$，表示军队个数。</p><p>接下来一行 $m $个整数，每两个整数之间用一个空格隔开，分别表示这 $m$ 个军队所驻扎的城市的编号。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个整数，表示控制疫情所需要的最少时间。如果无法控制疫情则输出$-1$。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">4 </span><br><span class="line">1 2 1 </span><br><span class="line">1 3 2 </span><br><span class="line">3 4 3 </span><br><span class="line">2 </span><br><span class="line">2 2</span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>【输入输出样例说明】</p><p>第一支军队在 $2$ 号点设立检查点，第二支军队从 $2$ 号点移动到$ 3$ 号点设立检查点，所需时间为 $3$ 个小时。</p><p>【数据范围】</p><p>保证军队不会驻扎在首都。</p><p>对于 20%的数据，$2≤ n≤ 10$；</p><p>对于 40%的数据，$2 ≤n≤50,0&lt;w &lt;10^5$；</p><p>对于 60%的数据，$2 ≤ n≤1000,0&lt;w &lt;10^6$；</p><p>对于 80%的数据，$2 ≤ n≤10,000$；</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h1 id=&quot;NOIP2012-提高组-疫情控制&quot;&gt;&lt;a href=&quot;#NOIP2012-提高组-疫情控制&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
    <category term="algorithm" scheme="http://example.com/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>post</title>
    <link href="http://example.com/posts/51727.html"/>
    <id>http://example.com/posts/51727.html</id>
    <published>2022-07-17T11:49:30.000Z</published>
    <updated>2022-07-22T03:07:12.853Z</updated>
    
    
    
    
    
  </entry>
  
</feed>
